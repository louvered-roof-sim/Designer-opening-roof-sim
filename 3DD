<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>3D Louvered Pergola Simulator</title>
  <style>
    body { margin: 0; font-family: sans-serif; background: #eaeaea; }
    #canvas-container { width: 100vw; height: 100vh; overflow: hidden; }
    #controls {
      position: absolute;
      top: 20px;
      left: 20px;
      background: white;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
      z-index: 10;
    }
    #controls label {
      display: block;
      margin: 10px 0 5px;
    }
    #controls input, #controls select, #controls button {
      width: 100%;
      padding: 4px;
      margin-bottom: 8px;
    }
  </style>
</head>
<body>
  <div id="canvas-container"></div>
  <div id="controls">
    <label for="louverAngle">Louver Angle:</label>
    <input type="range" id="louverAngle" min="0" max="90" value="45">

    <label for="frameColor">Frame Color:</label>
    <input type="color" id="frameColor" value="#555555">

    <label for="louverColor">Louver Color:</label>
    <input type="color" id="louverColor" value="#888888">

    <label for="width">Width (m):</label>
    <input type="number" id="width" value="6" min="2" max="10" step="0.5">

    <label for="depth">Depth (m):</label>
    <input type="number" id="depth" value="4" min="2" max="10" step="0.5">

    <label for="height">Height (m):</label>
    <input type="number" id="height" value="3" min="2" max="5" step="0.1">

    <button id="applySize">Apply Size</button>
    <button id="exportImage">Export Image</button>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/three@0.155.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.155.0/examples/js/controls/OrbitControls.js"></script>
  <script src="main.js"></script>
</body>
</html>


const container = document.getElementById('canvas-container');

let width = 6, depth = 4, height = 3;
let louvers = [], frame, frameMaterial, louverMaterial;

const scene = new THREE.Scene();
scene.background = new THREE.Color(0xddeeff);

const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(8, 8, 10);

const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
container.appendChild(renderer.domElement);

// Controls
const controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

// Lights
scene.add(new THREE.AmbientLight(0x404040));
const light = new THREE.DirectionalLight(0xffffff, 1);
light.position.set(10, 10, 10);
scene.add(light);

// Materials
frameMaterial = new THREE.MeshStandardMaterial({ color: 0x555555 });
louverMaterial = new THREE.MeshStandardMaterial({ color: 0x888888 });

// Add Pergola
function createPergola() {
  // Remove old frame and louvers
  if (frame) scene.remove(frame);
  louvers.forEach(l => scene.remove(l));
  louvers = [];

  // Create frame
  const frameGeo = new THREE.BoxGeometry(width, 0.1, depth);
  frame = new THREE.Mesh(frameGeo, frameMaterial);
  frame.position.y = height;
  scene.add(frame);

  // Create louvers
  const numLouvers = 5;
  for (let i = 0; i < numLouvers; i++) {
    const louver = new THREE.Mesh(
      new THREE.BoxGeometry(width - 0.5, 0.05, 0.3),
      louverMaterial
    );
    louver.position.set(0, height + 0.05, -depth / 2 + 0.5 + i * (depth / numLouvers));
    scene.add(louver);
    louvers.push(louver);
  }
}

createPergola();

// Angle Control
document.getElementById('louverAngle').addEventListener('input', (e) => {
  const angle = THREE.MathUtils.degToRad(e.target.value);
  louvers.forEach(l => l.rotation.x = angle);
});

// Color Pickers
document.getElementById('frameColor').addEventListener('input', e => {
  frameMaterial.color.set(e.target.value);
});
document.getElementById('louverColor').addEventListener('input', e => {
  louverMaterial.color.set(e.target.value);
});

// Size Adjuster
document.getElementById('applySize').addEventListener('click', () => {
  width = parseFloat(document.getElementById('width').value);
  depth = parseFloat(document.getElementById('depth').value);
  height = parseFloat(document.getElementById('height').value);
  createPergola();
});

// Export Image
document.getElementById('exportImage').addEventListener('click', () => {
  renderer.render(scene, camera);
  const link = document.createElement('a');
  link.download = 'pergola-design.png';
  link.href = renderer.domElement.toDataURL('image/png');
  link.click();
});

// Resize
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});

// Render Loop
function animate() {
  requestAnimationFrame(animate);
  controls.update();
  renderer.render(scene, camera);
}
animate();
